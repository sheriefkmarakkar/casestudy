undefined;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Spinner',
      desc: "Most common and popular loader.",
      tags: ['spinner', 'preloader', 'ajax', 'loading', 'icon'],
      slug: "ajax-spinner-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'width': 6,
        'height': 12,
        'count': 12,
        'radius': 20,
        'round': 20,
        'color': '#4ae'
      },
      id: 'spinner',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        width: {
          name: "Bar Width",
          type: 'number',
          'default': 6,
          slider: {
            min: 1,
            max: 100
          }
        },
        height: {
          name: "Bar Height",
          type: 'number',
          'default': 12,
          slider: {
            min: 1,
            max: 100
          }
        },
        count: {
          name: "Bar Count",
          type: 'number',
          'default': 12,
          slider: {
            min: 2,
            max: 100
          }
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 20,
          slider: {
            min: 0,
            max: 50
          }
        },
        round: {
          name: "Corner",
          type: 'number',
          'default': 20,
          slider: {
            min: 0,
            max: 100
          }
        },
        color: {
          name: "Color",
          type: 'color',
          'default': '#4ae'
        }
      },
      watch: function(n, o){
        return n;
      },
      stylus: function(config){
        var css, count, i$, i, angle, b;
        css = [];
        count = +config.count || 1;
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          angle = 360 * i / count;
          b = -config.speed * (count - i - 1) / count;
          css.push(".lds-spinner div:nth-child(" + (i + 1) + ")\n  transform(rotate(" + angle + "deg))\n  animation-delay(" + b + "s)");
        }
        return css.join("\n");
      },
      dom: function(config){
        var svg, count, w, h, c, r, vs, ts, i$, i, x, y, a, rx, ry, b;
        svg = [];
        count = +config.count || 1;
        w = +config.width;
        h = +config.height;
        c = config.color;
        r = +config.round;
        vs = "1;0";
        ts = "0;1";
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          x = 50 - +config.width / 2;
          y = 50 - +config.height / 2 - +config.radius;
          a = 360 * i / count;
          rx = x * r * 0.01;
          ry = y * r * 0.01;
          b = -config.speed * (count - i - 1) / count;
          svg.push("<g transform=\"rotate(" + a + " 50 50)\">\n  <rect x=\"" + x + "\" y=\"" + y + "\" rx=\"" + rx + "\" ry=\"" + ry + "\" width=\"" + w + "\" height=\"" + h + "\" fill=\"" + c + "\">\n    <animate attributeName=\"opacity\" values=\"" + vs + "\" keyTimes=\"" + ts + "\" dur=\"" + config.speed + "s\"\n    begin=\"" + b + "s\" repeatCount=\"indefinite\"/>\n  </rect>\n</g>");
        }
        return [svg.join(""), repeatString$("<div></div>", count)];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Eclipse',
      desc: "delicated crafted that fits in elegant and fashionable pages",
      tags: ['eclipse', 'ring', 'circle', 'rotate'],
      slug: "ring-loading-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'radius': 40,
        'color': '#e92',
        'thick': 2,
        'offset': 20,
        'pathCmd': 'M10 50A40 40 0 0 0 90 50A40 42 0 0 1 10 50',
        'rotate': '0 50 51;360 50 51'
      },
      id: 'eclipse',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        radius: {
          name: 'Radius',
          type: 'number',
          'default': 40
        },
        color: {
          name: 'Color',
          type: 'color',
          'default': '#e92'
        },
        thick: {
          name: 'Thickness',
          type: 'number',
          'default': 2
        }
      },
      watch: function(n, o){
        var ref$, r1, r2, x1, x2;
        n.offset = 100 - +n.radius * 2;
        ref$ = [+n.radius, +n.radius + +n.thick], r1 = ref$[0], r2 = ref$[1];
        ref$ = [50 - r1, 50 + r1], x1 = ref$[0], x2 = ref$[1];
        n.pathCmd = "M" + x1 + " 50A" + r1 + " " + r1 + " 0 0 0 " + x2 + " 50A" + r1 + " " + r2 + " 0 0 1 " + x1 + " 50";
        n.rotate = "0 50 " + (50 + +n.thick / 2) + ";360 50 " + (50 + +n.thick / 2);
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Ripple',
      desc: "ripple / radio / broadcast style loader",
      tags: ['ripple', 'circle', 'scale', 'round', 'radar', 'radio'],
      slug: "ripple-radio-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'width': 2,
        'radius': 40,
        'c1': '#e92',
        'c2': '#9e2',
        'speed2': -0.5
      },
      id: 'ripple',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        width: {
          name: "Stroke width",
          type: 'number',
          'default': 2
        },
        radius: {
          name: 'Radius',
          type: 'number',
          'default': 40
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        }
      },
      watch: function(n, o){
        return n.speed2 = n.speed * -0.5, n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Spin',
      desc: "most common spinner circle that works for any situation. single color version",
      tags: ['spinner', 'ball', 'circle', 'rotate', 'rosary', 'loader', 'ajax'],
      slug: "ajax-spinner-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'radius': 10,
        'width': 30,
        'color': '#e92',
        'scaling': 'all',
        'ratio': 1.1,
        'count': 8,
        'ratioX': 1.1,
        'ratioY': 1.1
      },
      id: 'spin',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        radius: {
          name: "Ball Radius",
          type: 'number',
          'default': 10
        },
        width: {
          name: "Width",
          type: 'number',
          'default': 30
        },
        color: {
          name: "Color",
          type: 'color',
          'default': '#e92'
        },
        scaling: {
          name: "Scale Direction",
          type: 'choice',
          'default': 'all',
          values: ['all', 'vertically', 'horizontally']
        },
        ratio: {
          name: "Scale Ratio",
          type: 'number',
          'default': 1.1
        },
        count: {
          name: "Ball Count",
          type: 'number',
          'default': 8
        }
      },
      watch: function(n, o){
        var ref$;
        n.ratioX = (ref$ = n.scaling) === 'all' || ref$ === 'vertically' ? +n.ratio : 1;
        n.ratioY = (ref$ = n.scaling) === 'all' || ref$ === 'horizontally' ? +n.ratio : 1;
        return n;
      },
      dom: function(config){
        var svg, w, r, c, count, vss, vos, i$, i, a, degree, x, y, o, d;
        svg = [];
        w = +config.width;
        r = +config.radius;
        c = config.color;
        count = +config.count || 1;
        vss = [config.ratioX, config.ratioY].join(" ");
        vss = vss + ";1 1";
        vos = "1;0";
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          a = 2 * Math.PI * i / count;
          degree = a * 180 / Math.PI;
          x = 50 + w * Math.cos(a);
          y = 50 + w * Math.sin(a);
          o = (count - i) / count;
          d = +config.speed * -(count - i - 1) / count;
          svg.push("<g transform=\"translate(" + x + "," + y + ")\">\n<g transform=\"rotate(" + degree + ")\">\n<circle cx=\"0\" cy=\"0\" r=\"" + r + "\" fill=\"" + c + "\" fill-opacity=\"" + o + "\">\n  <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"" + d + "s\"\n  values=\"" + vss + "\" keyTimes=\"0;1\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"/>\n  <animate attributeName=\"fill-opacity\" keyTimes=\"0;1\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"\n  values=\"" + vos + "\" begin=\"" + d + "s\"/>\n</circle>\n</g>\n</g>");
        }
        svg = svg.join("");
        return [svg, repeatString$("<div><div></div></div>", count)];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Rolling',
      desc: "simple, lightweight generic loading indicator",
      tags: ['bar', 'circle', 'curve', 'round', 'rotate'],
      slug: "curve-bars-loading-indicator",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'color': '#e92',
        'width': 10,
        'radius': 35,
        'dasharray': '164.93361431346415 56.97787143782138'
      },
      id: 'rolling',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        color: {
          name: 'Color',
          type: 'color',
          'default': '#e92'
        },
        width: {
          name: "Stroke Width",
          type: 'number',
          'default': 10
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 35
        }
      },
      watch: function(n, o){
        var len;
        len = Math.PI * +n.radius;
        n.dasharray = 1.5 * len + " " + (0.5 * len + 2);
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Reload',
      desc: "best for showing user that you are now reloading",
      tags: ['reload', 'sync', 'ajax', 'get', 'fetch'],
      slug: "ajax-syncing-loading-icon",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'color': '#e92',
        'width': 12,
        'arrowWidth': 12,
        'arrowHeight': 12,
        'darrow': 'M49 3L49 27L61 15L49 3',
        'ay': -14.497474683058321,
        'ax': -14.497474683058321
      },
      id: 'reload',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        color: {
          name: "Color",
          type: 'color',
          'default': '#e92'
        },
        width: {
          name: "Circle Width",
          type: 'number',
          'default': 12
        },
        arrowWidth: {
          name: "Arrow Width",
          type: 'number',
          'default': 12
        }
      },
      watch: function(n, o){
        n.arrowHeight = n.arrowWidth;
        n.darrow = "M49 " + (15 - +n.arrowWidth) + "L49 " + (15 + +n.arrowWidth) + "L" + (49 + +n.arrowHeight) + " 15L49 " + (15 - +n.arrowWidth);
        n.ay = -n.arrowWidth + n.width / 2;
        n.ax = -n.arrowWidth;
        n.ax = n.ay = 1 + (70 - +n.width) - +n.arrowWidth * 2 - 70 / Math.sqrt(2);
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Infinity',
      desc: "moving path along an infinity shape. be sure to try larger length",
      tags: ['infinity', 'dash', 'line', 'curve', 'rotate', 'cycle'],
      slug: "infinity-rotate-cycle-loader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'stroke': '#e92',
        'width': 2,
        'dashLen': 2,
        'dasharray': '2.5658892822265624 2.5658892822265624',
        'dashoffset': '0;256.58892822265625'
      },
      id: 'infinity',
      license: 'CC0',
      support: {
        svg: true
      },
      edit: {
        stroke: {
          name: "Stroke Color",
          type: 'color',
          'default': '#e92'
        },
        width: {
          name: "Stroke Width",
          type: 'number',
          'default': 2,
          slider: {
            min: 0,
            max: 10
          }
        },
        dashLen: {
          name: "Dash Length",
          type: 'number',
          'default': 2,
          slider: {
            min: 0,
            max: 100
          }
        }
      },
      watch: function(n, o){
        var len, dlen1, dlen2, count;
        len = 256.58892822265625;
        if (n.dashLen >= 50) {
          dlen1 = len * n.dashLen * 0.01;
          dlen2 = len - dlen1;
        } else {
          dlen1 = len * n.dashLen * 0.01;
          count = Math.floor(len / dlen1);
          count = (count || 1) * 2;
          dlen1 = dlen2 = len / count;
        }
        n.dasharray = dlen1 + " " + dlen2;
        return n.dashoffset = "0;" + len, n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Gear',
      desc: "rotating gear that is useful in config/setting panels",
      tags: ['rotate', 'gear', 'config', 'setting', 'tool'],
      slug: "config-gear-loading-icon",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'innerRadius': 20,
        'outerRadius': 38,
        'toothHeight': 10,
        'toothWidth': 13,
        'count': 12,
        'color': '#e92'
      },
      id: 'gear',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        innerRadius: {
          name: "Inner Radius",
          type: 'number',
          'default': 20
        },
        outerRadius: {
          name: "Outer Radius",
          type: 'number',
          'default': 38
        },
        toothHeight: {
          name: "Tooth Height",
          type: 'number',
          'default': 10
        },
        toothWidth: {
          name: "Tooth Width",
          type: 'number',
          'default': 13
        },
        count: {
          name: "Count",
          type: 'number',
          'default': 12
        },
        color: {
          name: "Color",
          type: 'color',
          'default': '#e92'
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        var svg, pathCmd, ref$, ro, ri, theta, dangle, i$, to$, i, a1, a2, na1, x1, y1, nx1, ny1, x4, y4, dx, dy, dlen, x2, y2, x3, y3, cmd;
        svg = ["<g transform=\"translate(50 50)\">\n<g>\n<animateTransform attributeName=\"transform\" type=\"rotate\"\nvalues=\"0;360\" keyTimes=\"0;1\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"/>"];
        pathCmd = [];
        ref$ = [config.outerRadius, config.innerRadius], ro = ref$[0], ri = ref$[1];
        theta = Math.asin((config.toothWidth * 0.5) / ro);
        dangle = (Math.PI * 2) / config.count;
        for (i$ = 0, to$ = config.count; i$ < to$; ++i$) {
          i = i$;
          a1 = dangle * i - theta;
          a2 = dangle * i + theta;
          na1 = dangle * (i + 1) - theta;
          x1 = ro * Math.cos(a1);
          y1 = ro * Math.sin(a1);
          nx1 = ro * Math.cos(na1);
          ny1 = ro * Math.sin(na1);
          x4 = ro * Math.cos(a2);
          y4 = ro * Math.sin(a2);
          dx = (x1 + x4) / 2;
          dy = (y1 + y4) / 2;
          dlen = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
          dx = dx / dlen;
          dy = dy / dlen;
          x2 = x1 + dx * config.toothHeight;
          y2 = y1 + dy * config.toothHeight;
          x3 = x4 + dx * config.toothHeight;
          y3 = y4 + dy * config.toothHeight;
          cmd = i === 0 ? "M" : "L";
          pathCmd.push(cmd + "" + x1 + " " + y1 + " L" + x2 + " " + y2 + " L" + x3 + " " + y3 + " L" + x4 + " " + y4 + " A" + ro + " " + ro + " 0 0 1 " + nx1 + " " + ny1);
        }
        pathCmd.push("M0 " + (-ri) + "A" + ri + " " + ri + " 0 1 0 0 " + ri + " A" + ri + " " + ri + " 0 1 0 0 " + (-ri));
        svg.push("<path d=\"" + pathCmd.join(' ') + "\" fill=\"" + config.color + "\"/>");
        svg.push("</g></g>");
        return [svg.join(""), "<div><div></div>" + repeatString$('<div></div>', config.count / 2) + "<div></div></div>"];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Facebook',
      desc: "pulsing bars used by facebook",
      tags: "facebook bar pulse",
      slug: "pulse-bar-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'width': 15,
        'height': 40,
        'scale': 1.6,
        'c1': '#e94',
        'c2': '#9e4',
        'c3': '#49e',
        'x1': 17.5,
        'x2': 42.5,
        'x3': 67.5,
        'y': 30,
        'y1': 18,
        'y2': 20.999999999999996,
        'y3': 24,
        'height1': 64,
        'height2': 58.00000000000001,
        'height3': 52,
        'speed2': -0.2,
        'speed1': -0.1
      },
      id: 'facebook',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        width: {
          name: "Bar Width",
          type: 'number',
          'default': 15
        },
        height: {
          name: "Bar Height",
          type: 'number',
          'default': 40
        },
        scale: {
          name: "Scale Factor",
          type: 'number',
          'default': 1.6,
          slider: {
            from: 1,
            to: 2,
            step: 0.1
          }
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e94'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e4'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#49e'
        }
      },
      watch: function(n, o){
        var x1, x2, x3, height1, height2, height3, y, y1, y2, y3, speed2, speed1;
        x1 = 25 - n.width / 2;
        x2 = 50 - n.width / 2;
        x3 = 75 - n.width / 2;
        height1 = n.height * n.scale;
        height2 = n.height * (0.75 * (n.scale - 1) + 1);
        height3 = n.height * (0.5 * (n.scale - 1) + 1);
        y = (100 - n.height) / 2;
        y1 = (100 - height1) / 2;
        y2 = (100 - height2) / 2;
        y3 = (100 - height3) / 2;
        speed2 = n.speed * -0.2;
        speed1 = n.speed * -0.1;
        return n.x1 = x1, n.x2 = x2, n.x3 = x3, n.y = y, n.y1 = y1, n.y2 = y2, n.y3 = y3, n.height1 = height1, n.height2 = height2, n.height3 = height3, n.speed2 = speed2, n.speed1 = speed1, n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: "Dual Ring",
      desc: "Dual rings rotate with each other",
      tags: ['disqus', 'ring', 'donut', 'rotate'],
      slug: "dual-ring-loader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'width': 4,
        'stroke': '#e92',
        'radius': 40,
        'dasharray': '62.83185307179586 62.83185307179586',
        'r': 42
      },
      id: 'dual-ring',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        width: {
          name: "Stroke Width",
          type: 'number',
          'default': 4
        },
        stroke: {
          name: "Stroke Color",
          type: 'color',
          'default': '#e92'
        },
        radius: {
          name: "Circle Radius",
          type: 'number',
          'default': 40
        }
      },
      watch: function(n, o){
        n.dasharray = n.radius * Math.PI / 2 + " " + n.radius * Math.PI / 2;
        return n.r = n.radius + n.width * 0.5, n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Cube',
      desc: "Pulsing blocks with different colors",
      tags: ['pulse', 'beat', 'square', 'block', 'rectangle'],
      slug: "pulsing-squares-loader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'blockSize': 40,
        'mag': 150,
        'c1': '#e92',
        'c2': '#9e2',
        'c3': '#92e',
        'c4': '#29e',
        'dp': -20,
        'vs': '1.5;1',
        'b1': -0.3,
        'b2': -0.2,
        'b3': -0.1,
        'b4': 0
      },
      id: 'cube',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        blockSize: {
          name: "Block Size",
          type: 'number',
          'default': 40,
          slider: {
            min: 0,
            max: 49
          }
        },
        mag: {
          name: "Strength",
          type: 'number',
          'default': 150,
          slider: {
            min: 110,
            max: 200
          }
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#92e'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          'default': '#29e'
        }
      },
      watch: function(n, o){
        n.dp = -n.blockSize / 2;
        return import$(n, {
          vs: [n.mag * 0.01, 1].join(";"),
          b1: n.speed * -0.3,
          b2: n.speed * -0.2,
          b3: n.speed * -0.1,
          b4: n.speed * -0
        });
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Blocks',
      desc: "cycling blocks that could be found in adobe website",
      tags: ['rectangle', 'square', 'rotate', 'cycle', 'adobe'],
      slug: "rotating-squares-preloader-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'margin': 1,
        'width': 20,
        'count': 3,
        'c1': '#e92',
        'c2': '#9e2',
        'totalCount': 8
      },
      id: 'blocks',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        margin: {
          name: "Margin",
          type: 'number',
          'default': 1
        },
        width: {
          name: "Block Width",
          type: 'number',
          'default': 20
        },
        count: {
          name: "Block Count",
          type: 'number',
          'default': 3
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        }
      },
      watch: function(n, o){
        n.totalCount = +n.count * 4 - 4 || 1;
        return n;
      },
      dom: function(config){
        var svg, css, count, totalCount, w, h, m, outerMargin, ref$, c1, c2, vs, ts, i$, i, j$, j, x, y, order, b;
        svg = [];
        css = [];
        count = +config.count || 1;
        totalCount = config.totalCount;
        w = h = +config.width;
        m = +config.margin;
        outerMargin = (100 - w * count - m * (count - 1)) / 2;
        ref$ = [config.c1, config.c2], c1 = ref$[0], c2 = ref$[1];
        vs = c2 + ";" + c1 + ";" + c1;
        ts = "0;" + 1 / totalCount + ";1";
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          for (j$ = 0; j$ < count; ++j$) {
            j = j$;
            if ((i > 0 && i < count - 1) && (j > 0 && j < count - 1)) {
              continue;
            }
            x = outerMargin + (w + m) * j;
            y = outerMargin + (w + m) * i;
            order = i === 0
              ? j
              : i === count - 1
                ? count * 2 - 2 + (count - j - 1)
                : j === 0
                  ? count * 3 - 3 + (count - i - 1)
                  : j === count - 1 ? count + i - 1 : void 8;
            b = config.speed * order / totalCount;
            svg.push("<rect x=\"" + x + "\" y=\"" + y + "\" width=\"" + w + "\" height=\"" + h + "\" fill=\"" + c1 + "\">\n  <animate attributeName=\"fill\" values=\"" + vs + "\" keyTimes=\"" + ts + "\" dur=\"" + config.speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + b + "s\" calcMode=\"discrete\"/>\n</rect>");
            css.push("<div style='left:" + x * 2 + "px;top:" + y * 2 + "px;animation-delay:" + b + "s'></div>");
          }
        }
        return [svg.join(""), css.join("")];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Ball',
      desc: "a simple bouncing ball",
      tags: ['ball', 'circle', 'round', 'bounce', 'jump', 'reflex'],
      slug: "bouncing-circle-loading-icon",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'color': '#e92',
        'radius': 13,
        'cy': 23,
        'cyvs': '23;77;23'
      },
      id: 'ball',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        color: {
          name: "Color",
          type: 'color',
          'default': '#e92'
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 13
        }
      },
      watch: function(n, o){
        n.cy = 10 + +n.radius;
        n.cyvs = (10 + +n.radius) + ";" + (90 - +n.radius) + ";" + (10 + +n.radius);
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Pacman',
      desc: "from classic video game 'pacman'. there are even beans!",
      tags: ['pacman', 'bean', 'game', 'video', 'pie', 'eat', 'mouth'],
      slug: "eat-bean-pie-loading-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#fefe27',
        'c2': '#fff',
        'show': true,
        'd1': -0.67,
        'd2': -0.33,
        'd3': 0,
        'showBean': 'block',
        'showBeanOffset': -15
      },
      id: 'pacman',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#fefe27'
        },
        c2: {
          name: "Color 1",
          type: 'color',
          'default': '#fff'
        },
        show: {
          name: "Show Bean",
          type: 'boolean',
          'default': true
        }
      },
      watch: function(n, o){
        n.d1 = -0.67 * +n.speed;
        n.d2 = -0.33 * +n.speed;
        n.d3 = -0 * +n.speed;
        n.showBean = n.show ? "block" : "none";
        n.showBeanOffset = n.show ? -15 : 0;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Wedges',
      desc: "rotating pies, in different speeds",
      tags: ['pie', 'wedge', 'pizza', 'circle', 'round', 'rotate'],
      slug: "rotate-pie-preloader-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 3,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#e92',
        'c2': '#9e2',
        'c3': '#92e',
        'c4': '#29e',
        'opacity': 0.8,
        'zoom': 35,
        'speed1': 0.75,
        'speed2': 1,
        'speed3': 1.5,
        'speed4': 3,
        'scale': 0.7,
        'x': 30,
        'w': 70
      },
      id: 'wedges',
      support: {
        svg: true,
        css: true
      },
      license: 'CC0',
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#92e'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          'default': '#29e'
        },
        opacity: {
          name: "Opacity",
          type: 'number',
          'default': 0.8,
          slider: {
            min: 0,
            max: 1,
            step: 0.01
          }
        },
        zoom: {
          name: "Scale",
          type: 'number',
          'default': 35,
          slider: {
            min: 0,
            max: 50
          }
        },
        speed: {
          'default': 3
        }
      },
      watch: function(n, o){
        n.speed1 = n.speed / 4;
        n.speed2 = n.speed / 3;
        n.speed3 = n.speed / 2;
        n.speed4 = n.speed / 1;
        n.scale = n.zoom / 50;
        n.x = 100 - n.zoom * 2;
        n.w = n.zoom * 2;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Disk',
      desc: "rotating disk with a little ball over it. used by Wordpress",
      tags: ['wordpress', 'disk', 'ball', 'circle', 'round', 'rotate'],
      slug: "wordpress-rotating-ball-loading-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#e92',
        'c2': '#9e2',
        'r': 15,
        'margin': 7,
        'zoom': 35,
        'cy': -28,
        'scale': 0.7,
        'w1': 140,
        'w2': 42,
        'cx1': 30,
        'cy1': 30,
        'cx2': 79,
        'cy2': 39.800000000000004,
        'tox2': 21,
        'toy2': 60.199999999999996
      },
      id: 'disk',
      support: {
        svg: true,
        css: true
      },
      license: 'CC0',
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        r: {
          name: "Ball Radius",
          type: 'number',
          'default': 15,
          slider: {
            min: 0,
            max: 50
          }
        },
        margin: {
          name: "Ball Margin",
          type: 'number',
          'default': 7,
          slider: {
            min: 0,
            max: 50
          }
        },
        zoom: {
          name: "Scale",
          type: 'number',
          'default': 35,
          slider: {
            min: 0,
            max: 50
          }
        }
      },
      watch: function(n, o){
        n.cy = +n.margin + +n.r - 50;
        n.scale = +n.zoom / 50;
        n.w1 = 200 * n.scale;
        n.w2 = +n.r * 4 * n.scale;
        n.cx1 = 100 - n.w1 / 2;
        n.cy1 = 100 - n.w1 / 2;
        n.cx2 = 100 - n.w2 / 2;
        n.cy2 = 100 - (100 - +n.margin * 2) * n.scale;
        n.tox2 = n.w2 / 2;
        n.toy2 = (100 - +n.margin * 2) * n.scale;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: "Double Ring",
      desc: "Double dual ring rotates in different direction",
      tags: ['disqus', 'ring', 'donut', 'rotate', 'double'],
      slug: "double-ring-spinner",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'width': 4,
        'c1': '#e92',
        'c2': '#9e2',
        'radius': 40,
        'radius2': 35,
        'dasharray': '62.83185307179586 62.83185307179586',
        'dasharray2': '54.97787143782138 54.97787143782138',
        'dashoffset2': '54.97787143782138',
        'r1': 42,
        'r2': 37
      },
      id: 'double-ring',
      license: 'CC-BY',
      support: {
        svg: true,
        css: true
      },
      edit: {
        width: {
          name: "Stroke Width",
          type: 'number',
          'default': 4
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        radius: {
          name: "Circle Radius",
          type: 'number',
          'default': 40
        }
      },
      watch: function(n, o){
        n.radius2 = +n.radius - +n.width - 1;
        import$(n, {
          dasharray: n.radius * Math.PI / 2 + " " + n.radius * Math.PI / 2,
          dasharray2: n.radius2 * Math.PI / 2 + " " + n.radius2 * Math.PI / 2,
          dashoffset2: n.radius2 * Math.PI / 2 + ""
        });
        return import$(n, {
          r1: n.radius * 1 + n.width * 0.5,
          r2: n.radius2 * 1 + n.width * 0.5
        });
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Ellipsis',
      desc: "typing, speaking, usually used in an ongoing conversation",
      tags: ['speaking', 'discussion', 'text', 'ellipsis', 'typing', 'move'],
      slug: "discuss-ellipsis-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#f00',
        'c2': '#0f0',
        'c3': '#00f',
        'c4': '#f0f',
        'r': 10,
        'speed1': -0.25,
        'speed2': -0.5,
        'speed3': -0.75
      },
      id: 'ellipsis',
      license: 'CC-BY',
      support: {
        svg: true,
        css: true
      },
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#f00'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#0f0'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#00f'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          'default': '#f0f'
        },
        r: {
          name: "Radius",
          type: 'number',
          'default': 10
        }
      },
      watch: function(n, o){
        import$(n, {
          speed1: n.speed * -0.25,
          speed2: n.speed * -0.5,
          speed3: n.speed * -0.75
        });
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Flickr',
      desc: "two balls orbit around each other. used by Flickr",
      tags: ['flickr', 'ball', 'circle', 'round'],
      slug: "orbit-balls-loading-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'radius': 20,
        'c1': '#e92',
        'c2': '#9e2',
        'cx1': 30,
        'cx2': 70,
        'vs': '30;70;30',
        't1': -0.5
      },
      id: 'flickr',
      license: 'CC0',
      support: {
        svg: true,
        css: true
      },
      edit: {
        radius: {
          name: 'Radius',
          type: 'number',
          'default': 20
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        }
      },
      watch: function(n, o){
        var radius;
        radius = +n.radius;
        n.cx1 = 50 - radius;
        n.cx2 = 50 + radius;
        n.vs = [50 - radius, 50 + radius, 50 - radius].join(";");
        n.t1 = -n.speed * 1 / 2;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Magnify',
      desc: "often used when searching / looking up for something",
      tags: ['search', 'look', 'find', 'magnify', 'zoom', 'scale'],
      slug: "searching-for-loading-icon",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'frame': '#e92',
        'glass': '#9e2',
        'zoom': 40,
        'vs': '-20 -20;20 -20;0 20;-20 -20',
        'scale': 0.8
      },
      id: 'magnify',
      license: 'CC-BY',
      support: {
        svg: true,
        css: true
      },
      edit: {
        frame: {
          name: "Frame Color",
          type: 'color',
          'default': '#e92'
        },
        glass: {
          name: "Glass Color",
          type: 'color',
          'default': '#9e2'
        },
        zoom: {
          name: "Scale",
          type: 'number',
          'default': 40,
          slider: {
            min: 0,
            max: 50
          }
        }
      },
      watch: function(n, o){
        n.vs = "-20 -20;20 -20;0 20;-20 -20";
        n.scale = +n.zoom / 50;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Triangles',
      desc: "zelda-style rotating triangles",
      tags: ['triangle', 'triforce', 'pyramid'],
      slug: "pyramid-rotating-loading-icon",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#e92',
        'c2': '#9e2',
        'c3': '#92e'
      },
      id: 'triangles',
      license: 'CC-BY',
      support: {
        svg: true
      },
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#92e'
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Radio',
      desc: "best with syncing / connecting related actions.",
      tags: ['alien', 'connection', 'signal', 'radio', 'rss', 'wifi', 'information', 'transmit', 'sync', 'transfer'],
      slug: "broadcast-rss-wifi-signal-preloader-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#e92',
        'c2': '#9e2',
        'c3': '#92e',
        'd1': 0.1,
        'd2': 0.2
      },
      id: 'radio',
      license: 'CC-BY',
      support: {
        svg: true,
        css: true
      },
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#92e'
        }
      },
      watch: function(n, o){
        n.d1 = 0.1 * +n.speed;
        n.d2 = 0.2 * +n.speed;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Balls',
      desc: "slack-style cycling balls along a regular polygon",
      tags: ['polygon', 'ball', 'circle', 'round', 'slack'],
      slug: "circle-slack-loading-icon",
      init: function(){},
      usepal: function(config, pal){
        return this.pal = pal;
      },
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'width': '30',
        'radius': 5,
        'count': 4,
        'pal': ['#ee9922', '#99ee22', '#2299ee'],
        'palcount': 3,
        'x': [150, 90, 30, 89],
        'y': [90, 150, 90, 30]
      },
      id: 'balls',
      license: 'RF',
      support: {
        svg: true,
        css: true
      },
      edit: {
        width: {
          name: 'Width',
          type: 'number',
          'default': '30'
        },
        radius: {
          name: "Ball Radius",
          type: 'number',
          'default': 5
        },
        count: {
          name: "Ball Count",
          type: 'number',
          'default': 4
        }
      },
      watch: function(n, o){
        var r, w, i$, to$, i;
        if (!this.pal) {
          this.pal = ["Balls", ['#ee9922', '#99ee22', '#2299ee']];
        }
        n.pal = this.pal[1];
        n.palcount = this.pal[1].length;
        n.x = [];
        n.y = [];
        r = +n.radius;
        w = +n.width;
        for (i$ = 0, to$ = n.count; i$ < to$; ++i$) {
          i = i$;
          n.x.push(parseInt(2 * w * Math.cos(Math.PI * 2 * i / n.count) + 100 - 2 * r));
          n.y.push(parseInt(2 * w * Math.sin(Math.PI * 2 * i / n.count) + 100 - 2 * r));
        }
        return n;
      },
      dom: function(config){
        var svg, css, count, r, w, ts, palcount, i$, i, x1, y1, x2, y2, c1, c2, xvs, yvs, fvs;
        svg = [];
        css = [];
        count = +config.count;
        r = +config.radius;
        w = +config.width;
        ts = "0;1";
        palcount = this.pal[1].length;
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          x1 = w * Math.cos(Math.PI * 2 * i / count) + 50;
          y1 = w * Math.sin(Math.PI * 2 * i / count) + 50;
          x2 = w * Math.cos(Math.PI * 2 * (i + 1) / count) + 50;
          y2 = w * Math.sin(Math.PI * 2 * (i + 1) / count) + 50;
          c1 = this.pal[1][i % palcount];
          c2 = i === count - 1
            ? this.pal[1][0]
            : this.pal[1][(i + 1) % palcount];
          xvs = x1 + ";" + x2;
          yvs = y1 + ";" + y2;
          fvs = c1 + ";" + c2;
          svg.push("<circle cx=\"" + x1 + "\" cy=\"" + y1 + "\" r=\"" + r + "\" fill=\"" + c1 + "\">\n  <animate attributeName=\"cx\" values=\"" + xvs + "\" keyTimes=\"" + ts + "\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"/>\n  <animate attributeName=\"cy\" values=\"" + yvs + "\" keyTimes=\"" + ts + "\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"/>\n  <animate attributeName=\"fill\"  values=\"" + fvs + "\" keyTimes=\"" + ts + "\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"/>\n</circle>");
        }
        return [svg.join(""), repeatString$("<div></div>", count)];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Default',
      desc: "Common spinner used in various website.",
      tags: ['ball', 'circle', 'rotate', 'spin', 'ring'],
      slug: "circle-dot-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'radius': 25,
        'ballSize': 5,
        'count': 12,
        'c1': '#ff7c81',
        'c2': '#ffffcb'
      },
      id: 'default',
      license: 'RF',
      support: {
        svg: true,
        css: true
      },
      edit: {
        radius: {
          name: "Radius",
          type: 'number',
          'default': 25
        },
        ballSize: {
          name: "Ball Size",
          type: 'number',
          'default': 5
        },
        count: {
          name: "Ball Count",
          type: 'number',
          'default': 12
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#ff7c81'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#ffffcb'
        }
      },
      watch: function(n, o){
        return n;
      },
      round: function(it){
        return Math.round(it * 1000) / 1000;
      },
      stylus: function(config){
        var count, ret, i$, i, a, cx, cy, r, b;
        count = +config.count;
        ret = [];
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          a = 2 * Math.PI * i / (count || 1);
          cx = this.round((config.radius * Math.cos(a) + 50) * 2);
          cy = this.round((config.radius * Math.sin(a) + 50) * 2);
          r = config.ballSize;
          b = this.round(-(count - i - 1) / count);
          ret.push(".lds-default div:nth-child(" + (i + 1) + ")\n  animation-delay(" + b + "s)\n  left: " + cx + "px\n  top: " + cy + "px");
        }
        return ret.join("\n");
      },
      dom: function(config){
        var svg, count, ref$, c1, c2, i$, i, a, cx, cy, r, r2, rs, fs, c, b, css;
        svg = [];
        count = +config.count;
        ref$ = {
          c1: config.c1,
          c2: config.c2
        }, c1 = ref$.c1, c2 = ref$.c2;
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          a = 2 * Math.PI * i / (count || 1);
          cx = this.round(config.radius * Math.cos(a) + 50);
          cy = this.round(config.radius * Math.sin(a) + 50);
          r = config.ballSize;
          r2 = r * 0.6;
          rs = [r2, r2, r, r2, r2].join(";");
          fs = [c2, c2, c1, c2, c2].join(";");
          c = config.fill;
          b = this.round(-config.speed * (count - i - 1) / count);
          svg.push("<circle cx=\"" + cx + "\" cy=\"" + cy + "\" fill=\"" + c + "\" r=\"" + r + "\">\n  <animate attributeName=\"r\" values=\"" + rs + "\" times=\"0;0.1;0.2;0.3;1\" dur=\"" + config.speed + "s\"\n  repeatCount=\"indefinite\" begin=\"" + b + "s\"/>\n  <animate attributeName=\"fill\" values=\"" + fs + "\" repeatCount=\"indefinite\"\n  times=\"0;0.1;0.2;0.3;1\" dur=\"" + config.speed + "s\" begin=\"" + b + "s\"/>\n</circle>");
        }
        css = repeatString$("<div></div>", count);
        return [svg.join(""), css];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Gears',
      desc: "great alternative to single gear loader",
      tags: ['rotate', 'gear', 'config', 'setting', 'tool'],
      slug: "dual-gear-loading-icon",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'innerRadius': 23,
        'outerRadius': 38,
        'toothHeight': 10,
        'toothWidth': 14,
        'count': 8,
        'c1': '#e92',
        'c2': '#e92'
      },
      id: 'gears',
      license: 'RF',
      support: {
        svg: true,
        css: true
      },
      edit: {
        innerRadius: {
          name: "Inner Radius",
          type: 'number',
          'default': 23
        },
        outerRadius: {
          name: "Outer Radius",
          type: 'number',
          'default': 38
        },
        toothHeight: {
          name: "Tooth Height",
          type: 'number',
          'default': 10
        },
        toothWidth: {
          name: "Tooth Width",
          type: 'number',
          'default': 14
        },
        count: {
          name: "Count",
          type: 'number',
          'default': 8
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#e92'
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        var svg, pathCmds, i$, j, b, pathCmd, ref$, ro, ri, theta, dangle, j$, to$, i, a1, a2, na1, x1, y1, nx1, ny1, x4, y4, dx, dy, dlen, x2, y2, x3, y3, cmd, c;
        svg = ["<g transform=\"translate(50 50)\">"];
        pathCmds = [];
        for (i$ = 0; i$ < 2; ++i$) {
          j = i$;
          if (j === 0) {
            svg.push(" <g transform=\"translate(-19 -19) scale(0.6)\"> ");
            b = 0;
          } else {
            svg.push(" <g transform=\"translate(19 19) scale(0.6)\"> ");
            b = -config.speed / (config.count * 2);
          }
          svg.push("<g>\n<animateTransform attributeName=\"transform\" type=\"rotate\"\nvalues=\"" + (j === 0 ? '0;360' : '360;0') + "\" keyTimes=\"0;1\"\ndur=\"" + config.speed + "s\" begin=\"" + b + "s\" repeatCount=\"indefinite\"/>");
          pathCmd = [];
          ref$ = [config.outerRadius, config.innerRadius], ro = ref$[0], ri = ref$[1];
          theta = Math.asin((config.toothWidth * 0.5) / ro);
          dangle = (Math.PI * 2) / config.count;
          for (j$ = 0, to$ = config.count; j$ < to$; ++j$) {
            i = j$;
            a1 = dangle * i - theta;
            a2 = dangle * i + theta;
            na1 = dangle * (i + 1) - theta;
            x1 = ro * Math.cos(a1);
            y1 = ro * Math.sin(a1);
            nx1 = ro * Math.cos(na1);
            ny1 = ro * Math.sin(na1);
            x4 = ro * Math.cos(a2);
            y4 = ro * Math.sin(a2);
            dx = (x1 + x4) / 2;
            dy = (y1 + y4) / 2;
            dlen = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
            dx = dx / dlen;
            dy = dy / dlen;
            x2 = x1 + dx * config.toothHeight;
            y2 = y1 + dy * config.toothHeight;
            x3 = x4 + dx * config.toothHeight;
            y3 = y4 + dy * config.toothHeight;
            cmd = i === 0 ? "M" : "L";
            c = j === 0
              ? config.c1
              : config.c2;
            pathCmd.push(cmd + "" + x1 + " " + y1 + " L" + x2 + " " + y2 + " L" + x3 + " " + y3 + " L" + x4 + " " + y4 + " A" + ro + " " + ro + " 0 0 1 " + nx1 + " " + ny1);
          }
          pathCmd.push("M0 " + (-ri) + "A" + ri + " " + ri + " 0 1 0 0 " + ri + " A" + ri + " " + ri + " 0 1 0 0 " + (-ri));
          svg.push("<path d=\"" + pathCmd.join(' ') + "\" fill=\"" + c + "\"/></g></g>");
        }
        svg.push("</g>");
        return [svg.join(""), "<div><div></div>" + repeatString$('<div></div>', config.count / 2) + "<div></div></div>\n<div><div></div>" + repeatString$('<div></div>', config.count / 2) + "<div></div></div>"];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Hourglass',
      desc: "classic loader used in GUI cursors to indicate waiting status",
      tags: ['hourglass', 'sandglass', 'time', 'date', 'filter', 'busy', 'waiting'],
      slug: "sandglass-time-loading-gif",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 2.2,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'frame': '#e92',
        'sand': '#9e2',
        'cpid': 'lds-hourglass-cpid-7da139ecceb6b'
      },
      id: 'hourglass',
      license: 'RF',
      support: {
        svg: true
      },
      edit: {
        frame: {
          name: "Glass Color",
          type: 'color',
          'default': '#e92'
        },
        sand: {
          name: "Sand Color",
          type: 'color',
          'default': '#9e2'
        },
        speed: {
          'default': 2.2
        }
      },
      watch: function(n, o){
        if (!n.cpid) {
          n.cpid = "lds-hourglass-cpid-" + Math.random().toString(16).substring(2);
        }
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Ring',
      desc: "ring varying in length",
      tags: "donut pie ring rotate",
      slug: "rotate-ring-spinner",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'maxlen': 50,
        'minlen': 10,
        'radius': 30,
        'width': 10,
        'innerWidth': 10,
        'stroke': '#e92',
        'base': '#ccc',
        'round': false,
        'linecap': 'square',
        'a1': 18.84955592153876,
        'a2': 169.64600329384882,
        'a3': 94.2477796076938,
        'a4': 94.24777960769377
      },
      id: 'ring',
      license: 'RF',
      support: {
        svg: true
      },
      edit: {
        maxlen: {
          name: "Max Length",
          type: 'number',
          'default': 50
        },
        minlen: {
          name: "Min Length",
          type: 'number',
          'default': 10
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 30
        },
        width: {
          name: "Thick",
          type: 'number',
          'default': 10
        },
        innerWidth: {
          name: "Inner Thick",
          type: 'number',
          'default': 10
        },
        stroke: {
          name: "Ring Color",
          type: 'color',
          'default': '#e92'
        },
        base: {
          name: "Base Color",
          type: 'color',
          'default': '#ccc'
        },
        round: {
          name: "Round",
          type: 'boolean',
          'default': false
        }
      },
      watch: function(n, o){
        var len, minlen, maxlen, a1, a2, a3, a4;
        len = n.radius * Math.PI * 2;
        minlen = len * n.minlen * 0.01;
        maxlen = len * n.maxlen * 0.01;
        a1 = minlen;
        a2 = len - minlen;
        a3 = maxlen;
        a4 = len - maxlen;
        n.linecap = n.round ? "round" : "square";
        n.a1 = a1;
        n.a2 = a2;
        n.a3 = a3;
        n.a4 = a4;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Azure',
      desc: "Microsoft Azure loader shown in login screen",
      tags: ['azure', 'ring', 'donut', 'pie', 'rotate', 'circle', 'cycle', 'radial'],
      slug: "azure-round-loader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'radius': 40,
        'width': 5,
        'c3': '#e92',
        'c2': '#9e2',
        'c1': '#92e',
        'r3': 46,
        'r2': 40,
        'r1': 34,
        'd3': 144.51326206513048,
        'd2': 125.66370614359172,
        'd1': 106.81415022205297,
        'speed1': -1,
        'speed2': -0.92,
        'speed3': -0.84,
        'speed4': -0.64,
        'speed5': -0.52,
        'speed6': -0.43999999999999995
      },
      id: 'azure',
      license: 'RF',
      support: {
        svg: true
      },
      edit: {
        radius: {
          name: "Radius",
          type: 'number',
          'default': 40,
          slider: {
            min: 0,
            max: 40
          }
        },
        width: {
          name: "Width",
          type: 'number',
          'default': 5,
          slider: {
            min: 0,
            max: 26
          }
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#92e'
        }
      },
      watch: function(n, o){
        import$(n, {
          r3: +n.radius + +n.width + 1,
          r2: +n.radius,
          r1: +n.radius - +n.width - 1
        });
        if (n.r1 < 0) {
          n.r1 = 0;
        }
        import$(n, {
          d3: n.r3 * Math.PI,
          d2: n.r2 * Math.PI,
          d1: n.r1 * Math.PI
        });
        return import$(n, {
          speed1: -n.speed,
          speed2: n.speed * 0.08 - n.speed,
          speed3: n.speed * 0.16 - n.speed,
          speed4: n.speed * 0.36 - n.speed,
          speed5: n.speed * 0.48 - n.speed,
          speed6: n.speed * 0.56 - n.speed
        });
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Wave',
      desc: "sine waves of moving balls",
      tags: ['sine', 'wave', 'circle', 'rosary', 'ball', 'collide', 'oscillate'],
      slug: "wave-ball-preloader",
      init: function(){},
      usepal: function(config, pal){
        return this.pal = pal;
      },
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'height': 20,
        'radius': 3,
        'count': 12,
        'c1': '#e92',
        'c2': '#9e2',
        'c3': '#92e',
        'c4': '#29e'
      },
      id: 'wave',
      license: 'RF',
      support: {
        svg: true,
        css: true
      },
      edit: {
        height: {
          name: 'Height',
          type: 'number',
          'default': 20
        },
        radius: {
          name: 'Radius',
          type: 'number',
          'default': 3
        },
        count: {
          name: 'Count',
          type: 'number',
          'default': 12
        },
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#92e'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          'default': '#29e'
        }
      },
      watch: function(n, o){
        return n;
      },
      stylus: function(config){
        var count, height, w, ret, i$, i, b, c, x;
        count = +config.count;
        height = +config.height;
        w = (config.radius * 2 + 1) * count;
        ret = [];
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          b = config.speed * -i / count;
          c = config["c" + (i % 4 + 1)];
          x = ((100 - w) / 2 + i * (2 * config.radius + 1) + config.radius) * 2;
          ret.push(".lds-wave div:nth-child(" + (i + 1) + ")\n  left: " + x + "px\n  animation-delay(" + b + "s)\n  background: " + c);
        }
        return ret.join("\n");
      },
      dom: function(config){
        var count, height, w, ref$, svg, css, i$, i, x, y, v, b, c;
        count = +config.count;
        height = +config.height;
        w = (config.radius * 2 + 1) * count;
        ref$ = [[], []], svg = ref$[0], css = ref$[1];
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          x = (100 - w) / 2 + i * (2 * config.radius + 1) + config.radius;
          y = Math.sin(Math.PI * 2 * i / count) * height + 50;
          v = [50 - height, 50 + height, 50 - height].join(";");
          b = config.speed * -i / count;
          c = config["c" + (i % 4 + 1)];
          svg.push("<circle cx=\"" + x + "\" cy=\"" + y + "\" ng-attr-r=\"{{config.radius}}\" fill=\"" + c + "\">\n  <animate attributeName=\"cy\" values=\"" + v + "\" times=\"0;0.5;1\" dur=\"{{config.speed}}s\"\n  calcMode=\"spline\" keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1\"\n  begin=\"" + b + "s\"\n  repeatCount=\"indefinite\"/>\n</circle>");
        }
        css = repeatString$("<div></div>", count);
        return [svg.join(""), css];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Curve Bars',
      desc: "Rotating curve bar chart. used in various websites",
      tags: ['curved', 'round', 'rotate', 'bar', 'circle', 'spin', 'rotate'],
      slug: "curved-bar-spinner",
      init: function(){},
      usepal: function(config, pal){
        return this.pal = pal;
      },
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'thick': 2
      },
      id: 'curve-bars',
      license: 'RF',
      support: {
        svg: true
      },
      edit: {
        thick: {
          type: 'number',
          'default': 2
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        var ret, len, i$, i, r, d, stroke, begin;
        ret = ["<g transform=\"translate(50,50)\">"];
        if (!this.pal) {
          this.pal = [null, ['#e92', '#9e2', '#29e']];
        }
        len = this.pal[1].length || 1;
        for (i$ = 0; i$ < len; ++i$) {
          i = i$;
          r = (2 * (i + 1) * 50) / (2 + len * 2);
          d = r * Math.PI;
          stroke = this.pal[1][i];
          begin = -i / len;
          ret.push("<circle cx=\"0\" cy=\"0\" r=\"" + r + "\" fill=\"none\" stroke=\"" + stroke + "\" stroke-width=\"{{config.thick}}\"\nstroke-dasharray=\"" + d + " " + d + "\">\n<animateTransform attributeName=\"transform\" type=\"rotate\"\nvalues=\"0 0 0;360 0 0\" times=\"0;1\" dur=\"{{config.speed}}s\" calcMode=\"spline\"\nkeySplines=\"0.2 0 0.8 1\" begin=\"" + begin + "\" repeatCount=\"indefinite\"/>\n</circle>");
        }
        ret.push("</g>");
        return ret.join("");
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Message',
      desc: "typing / sending message. best for messaging service",
      tags: ['messenger', 'message', 'typing', 'talk', 'speak', 'say', 'zoom', 'scale'],
      slug: "messenger-typing-preloader",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#e92',
        'c2': '#9e2',
        'c3': '#92e',
        'c4': '#29e',
        'radius': 6,
        'count': 4
      },
      id: 'message',
      license: 'RF',
      support: {
        svg: true,
        css: true
      },
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          'default': '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          'default': '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          'default': '#92e'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          'default': '#29e'
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 6,
          slider: {
            min: 1,
            max: 50
          }
        },
        count: {
          name: "Ball Count",
          type: 'number',
          'default': 4,
          slider: {
            min: 2,
            max: 10
          }
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        var svg, count, i$, i, x, y, r, vs, ts, ks, c, b, css;
        svg = [];
        count = +config.count || 1;
        for (i$ = 0; i$ < count; ++i$) {
          i = i$;
          x = (i + 1) * 100 / (count + 1);
          y = 50;
          r = config.radius;
          vs = "0;1;0";
          ts = "0;0.5;1";
          ks = "0.3 0 0.7 1;0.3 0 0.7 1";
          c = config["c" + (i % 4 + 1)];
          b = -config.speed * (count - i - 1) / count / 2;
          svg.push("<g transform=\"translate(" + x + " " + y + ")\">\n<circle cx=\"0\" cy=\"0\" r=\"" + r + "\" fill=\"" + c + "\">\n  <animateTransform attributeName=\"transform\" type=\"scale\"\n  begin=\"" + b + "s\" calcMode=\"spline\" keySplines=\"" + ks + "\"\n  values=\"" + vs + "\" keyTimes=\"" + ts + "\" dur=\"" + config.speed + "s\" repeatCount=\"indefinite\"/>\n</circle>\n</g>");
        }
        css = " " + repeatString$('<div></div>', count) + " ";
        return [svg.join(""), css];
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
};// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: 'Earth',
      desc: "earth, the rotating globe",
      tags: "earth globe map rotate",
      slug: "earth-globe-map-spinner",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 2,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'c1': '#fff',
        'c2': '#9cf'
      },
      id: 'earth',
      license: 'RF',
      support: {
        svg: true
      },
      edit: {
        c1: {
          name: "Foreground",
          type: 'color',
          'default': '#fff'
        },
        c2: {
          name: "Background",
          type: 'color',
          'default': '#9cf'
        },
        speed: {
          'default': 2
        }
      },
      watch: function(n, o){
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();;// Generated by LiveScript 1.3.0
(function(){
  var module, x$;
  module = {};
  (function(module){
    var d3Color, ret;
    if (typeof require != 'undefined' && require !== null) {
      d3Color = require('d3-color');
    }
    ret = {
      name: "Fidget Spinner",
      desc: "popular toy that spins on finger",
      tags: ['fidget', 'spinner', 'spin', 'rotate', 'toy'],
      slug: "fidget-spinner",
      init: function(){},
      usepal: function(config, pal){},
      config: {
        'speed': 1,
        'background': 'rgba(255,255,255,0%)',
        'size': 200,
        'radius': 40,
        'r': 0.8
      },
      id: 'fidget-spinner',
      license: 'RF',
      support: {
        svg: true,
        css: true
      },
      edit: {
        c1: {
          name: "Color 1",
          type: 'color',
          defatul: '#e92'
        },
        c2: {
          name: "Color 2",
          type: 'color',
          defatul: '#9e2'
        },
        c3: {
          name: "Color 3",
          type: 'color',
          defatul: '#92e'
        },
        c4: {
          name: "Color 4",
          type: 'color',
          defatul: '#29e'
        },
        radius: {
          name: "Radius",
          type: 'number',
          'default': 40,
          slider: {
            min: 1,
            max: 50
          }
        }
      },
      watch: function(n, o){
        n.r = n.radius * 0.02;
        return n;
      },
      dom: function(config){
        return "";
      },
      step: function(){}
    };
    if (module != null) {
      return module.exports = ret;
    }
  })(module);
  x$ = angular.module('loadingIO');
  x$.factory("lds-" + module.exports.id, ['$interval'].concat(function($interval){
    return module.exports;
  }));
  return x$;
})();